"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=u(n),p=o,m=h["".concat(l,".").concat(p)]||h[p]||c[p]||i;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={title:"Introduction",sidebar_position:1},a=void 0,s={unversionedId:"intro",id:"intro",title:"Introduction",description:"This is alpha stage software, even though the builder and client program works well to a certain degree, we",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/ham/docs/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",sidebar_position:1},sidebar:"tutorialSidebar"},l={},u=[{value:"Quickstart",id:"quickstart",level:2},{value:"How it Works",id:"how-it-works",level:2},{value:"HAM Recipes",id:"ham-recipes",level:2},{value:"Why Only Hetzner and not Cloud Provider X",id:"why-only-hetzner-and-not-cloud-provider-x",level:2},{value:"Why not CI/CD self-hosted?",id:"why-not-cicd-self-hosted",level:2},{value:"Disclaimer",id:"disclaimer",level:2},{value:"Hetzner Referral Program",id:"hetzner-referral-program",level:2},{value:"License",id:"license",level:2}],d={toc:u};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is alpha stage software, even though the builder and client program works well to a certain degree, we\nstill lack recipes for different devices. Mostly legacy devices need recipes since LOS does not support them."),(0,o.kt)("p",{parentName:"blockquote"},"I ask help from the community to create git repositories and follow the HAM recipe syntax to create LineageOS\nbuilds for legacy devices that LOS is supported. No need to port it to the latest LOS version, that is the work\ndone by LOS community, all we need to do is create recipes for such devices and make it build to a stable LOS\nversion with good platform security for Android. Vendor security cannot be improved since it's closed source.\nYou can also port to the latest version but stability over features."),(0,o.kt)("p",{parentName:"blockquote"},'Also recipes for OnePlus Devices to make ROMs which can run on locked bootloader. Until we get atleast 10 recipes\nthis project is considered a "Work in Progress".'),(0,o.kt)("p",{parentName:"blockquote"},"After you create a git repository with a stable ham recipe, request to move the repo to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ham-community"},"https://github.com/ham-community"))),(0,o.kt)("p",null,"HAM (Hetzner Android Make) is a Simple tool written in GO which can build LineageOS (or AOSP) from Source using\nHetzner Cloud. ",(0,o.kt)("strong",{parentName:"p"},"Build your Own Flavor of Android Under \u20ac1.")," (Run Directly from your Android Phone too..)"),(0,o.kt)("p",null,"Please install HAM for your Platform and Architecture and follow the Tutorial"),(0,o.kt)("p",null,"Everything is Automated, So you can start a build and just forget about it, the server destroys itself when\nthe job is done (i.e The build finishes and the assets are uploaded to some other server). The program makes\nsure that even if the build errors out, it destroys itself. This makes each AOSP build economical and faster."),(0,o.kt)("p",null,"It also runs on ",(0,o.kt)("strong",{parentName:"p"},"Termux")," so you can build AOSP right from your Android Phone."),(0,o.kt)("h2",{id:"quickstart"},"Quickstart"),(0,o.kt)("p",null,"Did you know that you can re-lock your Bootloader with OnePlus devices, upto OnePlus 7 just like Google Pixel phones\nwhich CalyxOS is doing. Having the bootloader unlocked is not a good thing, it's actually worse. Also LineageOS nightlies\nand other ROM builders don't enable Android Verified Boot which is another security layer by Android. All these security\nfeatures are lost when you simply use a pre-built custom rom. This is not good, the reason for HAM to exists is to make\nit easy to build their own Android from source without relying on others to pre-build them which will be buggy and\nunreliable. Also you could re-lock bootloader on OnePlus devices when you build your own LineageOS."),(0,o.kt)("p",null,"One of the ham community recipe is to do just that, this ham recipe takes in a Android Certs Zip file which contains\nall the android certificates which should not have passwords or encryption (See ",(0,o.kt)("a",{parentName:"p",href:"https://forum.xda-developers.com/t/guide-re-locking-the-bootloader-on-the-oneplus-6t-with-a-self-signed-build-of-los.4113743/"},"LineageOS Docs on Signing Builds"),") created by the user itself and builds a LineageOS ROM which can be flashed by the user and the bootloader\ncan be locked after flashing their public key to the ",(0,o.kt)("inlineCode",{parentName:"p"},"avb_custom_key")," partition. XDA forum for more instructions is ",(0,o.kt)("a",{parentName:"p",href:"https://forum.xda-developers.com/t/guide-re-locking-the-bootloader-on-the-oneplus-6t-with-a-self-signed-build-of-los.4113743/"},"here"),". The XDA forum shows how to flash the output of this ROM and your public key. ",(0,o.kt)("strong",{parentName:"p"},"The pkmd.bin file will be in the\nrecovery zip file which will also have the boot partition for you to use.")),(0,o.kt)("p",null,"Create your own recipes or browse recipes at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ham-community"},"https://github.com/ham-community"),", and then execute this in your terminal,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," # Currently only one recipe exists as said before,\n # This is for building LineageOS 19.1 for OnePlus 6\n # Devices. (Self Signed) (Which can be used with locked\n # bootloader.\n\n # Only Once, to Initialize Hetzner Cloud API\n ./ham-linux-amd64 init\n\n # You can't flash or use TWRP when locking bootloader,\n # only LineageOS recovery. No root for now. and Root\n # is not recommended. Gapps is build right into the ROM\n ./ham-linux-amd64 get ~@gh/enchilada-los19.1:gapps\n\n # or without gapps and with F-Droid Priv Extensions\n ./ham-linux-amd64 get ~@gh/enchilada-los19.1\n")),(0,o.kt)("p",null,"That's it, now your output should be uploaded by how the recipe describes. This recipe uploads the output to a\ngithub repo given by the user. The repo can be private so you won't get any letter from Google for using gapps."),(0,o.kt)("h2",{id:"how-it-works"},"How it Works"),(0,o.kt)("p",null,"Ham has two programs, namely ",(0,o.kt)("inlineCode",{parentName:"p"},"ham")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ham-build"),", ",(0,o.kt)("strong",{parentName:"p"},"ham-build")," program can only run on linux, this is by design\nsince it is not intended to run the user directly, this is the program which runs on Hetzner's cloud instance that we\ncreate. ",(0,o.kt)("strong",{parentName:"p"},"ham")," is the client program which can run on all platforms and architecture supported by golang, this program\nreads a recipe, ask question from the user when the build starts, creates a new cloud instance at Hetzner and then\nstarts the build. It is also responsible to track the progress of ",(0,o.kt)("strong",{parentName:"p"},"ham-build")," which will be running on the Hetzner's\ncloud instance."),(0,o.kt)("p",null,"The client program asks the user for required arguments for the build like Android Certificates if it's a signed build or\na API key for the recipe to upload the output to Github or some server. These variables and files provided by the user\nare transported to the build server securely over SSH and SFTP protocols using a temporary SSH key created by HAM client\nprogram. Every communication between ham client program and the ham-build program is done through SSH only (Using EdDSA and not RSA for security reasons)."),(0,o.kt)("h2",{id:"ham-recipes"},"HAM Recipes"),(0,o.kt)("p",null,"Ham recipes are simple directories which has ",(0,o.kt)("strong",{parentName:"p"},"ham.yaml")," or ",(0,o.kt)("strong",{parentName:"p"},"ham.yml")," file at the root of these simple directories.\nThis simple directory can contain anything the recipe author wants to have, this includes a version control too, so ham\nrecipes can be a git repository and it is recommended to be that way. ",(0,o.kt)("strong",{parentName:"p"},"The requirement for ham to see it as a recipe\nis that it has a valid ham.yml file and it follows the syntax that ham defines.")),(0,o.kt)("p",null,"HAM YAML syntax example,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Some sensible title for this recipe\ntitle: "Lineage OS 19.1 (Enchilada/OP6) (Signed)"\n# Semver or any string to trigger change for Ham\nversion: "0.0.1"\n\nargs:\n  # id: This will be the name of the env variable in the build\n  # server, no spaces are allowed, no hypens, only underscores.\n  # \n  # prompt: This will the string displayed to the user when ham\n  # client program asks questions to the user before the build.\n  # \n  # required: true or false, by default it\'s false if it is not\n  # defined by the recipe author. If true, build will not start\n  # if user does not provide value for this.\n  #\n  # type: file, secret or value, file type represents a file path\n  # which the user needs to give, secret is some type of secret\n  # variable which will be handled with care, value are simple\n  # string which will be set as env variables on the build server\n  # for you to use.\n\n  # There will be a env var on the build server called\n  # ANDROID_CERTS_ZIP, and this env var will contain the\n  # path to the uploaded file from the user on the build\n  # server, so you can move use it as you like.\n  - id: android_certs_zip\n    prompt: "Path to Android Certificates in Un-Encrypted ZIP"\n    required: true \n    type: file\n\n  # This field will not be required, so user will \n  # have the option to skip\n  # \n  # If user gives a value here, you will have a env\n  # variable in your build server named TELEGRAM_KEY\n  - id: telegram_key\n    prompt: "Telegram API Key"\n    type: secret\n  \n  # The id is capatilized and then set as the environmental\n  # variable in the build server which you can use on all\n  # your build scripts\n\n\n# The actual list of commands to execute for the build.\n# By default ham installs all the required basic requirement\n# for building LineageOS, so you don\'t need to do that.\n# It also sets the CCACHE env vars and also installs the\n# repo command directly to the system for you to use.\n# You might want to install your other deps using apt\n# package manager, make sure to pass -y and -qq args to\n# apt install\n\n# On each ham build, ham creates /ham-build, /ham-recipe directories by\n# default. /ham-recipe directory contains the entire directory of the ham\n# recipe, if it\'s a git repo, then it is cloned into that destination on \n# the build server.\n# \n# By default you are cd-ed into /ham-build which is an empty directory, you\n# are expected to use this directory as so called home directory, since using\n# absolute directories can be helpful when building AOSP and ~ are not really \n# parsed well by AOSP makefiles. \nbuild:\n  # IMPORTANT: Set this for every recipe\n  # otherwise your build will fail since repo\n  # command needs a default python version,\n  # not set by ham since we don\'t know if you are\n  # building for legacy devices.\n  - name: Set Python Default Version\n    run: apt install -y -qq python-is-python3\n \n  - name: Making Directory\n    run: mkdir lineage\n\n  # Github Action Style name and \n  # run\n  - name: Repo Init\n    run: |\n        cd lineage\n        repo sync -j20 -c < /dev/null\n        mkdir -p .repo/local_manifests\n  \n  - name: Execute Bash Scripts\n    run: /ham-recipe/scripts/yourscripts.sh\n\n  - name: Do Patches\n    run: patch /ham-build/lineage/Makefile /ham-recipe/patches/yourpatch.patch\n\n  - name: Use Args given by User\n    run: |\n      echo "$TELEGRAM_KEY" > key.txt\n      sleep 20\n      echo "Something"\n      \n  - name: Use Files Given by Users\n    run: |\n      cd /root/ # Which is the home dir\n      cp $ANDROID_CERTS_ZIP certs.zip\n      mkdir .android-certs\n      cd .android-certs\n      mv ../certs.zip .\n      unzip certs.zip\n      rm -rf certs.zip \n\n  - name: Make sure to change directory\n    run: cd /ham-build/lineage\n\n# Automatically cd-ed into the /ham-build directory\npost_build:\n  - echo "Finished" > lineage/build.txt\n  # Upload your files here.\n')),(0,o.kt)("h2",{id:"why-only-hetzner-and-not-cloud-provider-x"},"Why Only Hetzner and not Cloud Provider X"),(0,o.kt)("p",null,"Hetzner is the only cloud provider which has predictable pricing and good bandwidth. Bandwidth is not the only thing that\nmakes Hetzner perfect, all other cloud providers don't provide ",(0,o.kt)("strong",{parentName:"p"},"16 vCPUs AMD, 32 GB RAM, 10 GBit Internet and 320GB Storage")," for the price point they give. Also all Hetzner Cloud instance has ",(0,o.kt)("strong",{parentName:"p"},"20 TB")," bandwidth."),(0,o.kt)("p",null,"To summarize,"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Hetzner has clear Pricing")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They have really good and stable Cloud API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Easy to Understand API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Official Open Source GO library for Hetzner Cloud API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They Support Open Source Work")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They are based on Germany thus follows GDPR which means your Build Server's Data is Protected")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They are the Cheapest and Most Reliable Cloud Provider")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Referral Program gives new users free 20 euros cloud credit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Hetzner is a Big Company as AWS and GCP but not that Popular"))),(0,o.kt)("p",null,"Also GCP, AWS and Azure are more focused on enterprise users and thus have different billing system which means a single\nmistake can cost you thousands of dollars (search YouTube for incidents like this). That's the reason to go with Hetzner\nand it is recommended."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Also just focusing on one thing will make the program easy to maintain and code, also gives good quality. Just like the\nUnix philosophy that a program should only do one and one thing only, and do that correctly.")),(0,o.kt)("h2",{id:"why-not-cicd-self-hosted"},"Why not CI/CD self-hosted?"),(0,o.kt)("p",null,"Yes there are a lot of options and solutions for this problem, but none of it offers the lower cost per build like this\ntool, Thanks to Hetzner, cloud is very cheap and powerful at the same time. Cloud's ultimate power comes to it's scaling\npowers, but in CI/CD build systems, there is no way to scale down to zero (which is the ultimate scalability). We waste\na lot of computing resources doing noting but waiting for a cron job to actually do the work. "),(0,o.kt)("p",null,"With ",(0,o.kt)("strong",{parentName:"p"},"HAM"),", we can scale the cloud down to zero, ham creates a temporary server, reads a recipe and setups the\nenvironment and securely transfers required files and variables over SSH, starts the build and tracks it. Even if the\nclient program closes for some reason, the server is still running and building Android. Server destroys itself when\nthe work is finished without wasting costly computing resources."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"LineageOS 19.1 Signed Build for a Single Device(OnePlus 6) cost me about \u20ac0.30, the runtime of the build is around\n2-3 hours.")," I don't need to stay awake for the build, it just runs over night and the server destroys itself when the\njob is done. ",(0,o.kt)("strong",{parentName:"p"},"And the best part is, the client program can be run from Termux too, so I can just use my Android Phone\nto build a new Android OS for itself (remotely).")),(0,o.kt)("p",null,"Also I have seen some Github Actions which can create you Hetzner Server and Destroy it after running some command,\nThis is good too, but Ham gives other features like getting Variables and Files from the user and uploads it securely\nover to the build server. It also tracks in realtime. Running SSH is not wise, if the line breaks, the build is stopped,\nthis is not good, that's why Ham uses a daemon on the build server to actually run the build so even if any connection\nfails, the build is not affected. Also not everyone knows how to use Github CI/CD for a simple AOSP build."),(0,o.kt)("h2",{id:"disclaimer"},"Disclaimer"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},'This project has no association with "Hetzner Online GmbH" in any form or manner, This project is purely Community work\nand have no relationship with the company. This project purely exists for the community and will live if there is more contributions.')),(0,o.kt)("h2",{id:"hetzner-referral-program"},"Hetzner Referral Program"),(0,o.kt)("p",null,"Hetzner Online Gmbh has a referral program for loyal customers, if you signup using my referral link you will get free\n20 euros cloud credit which you can build a ton of LineageOS builds for any device you like. The only problem is that\nHetzner is pretty hard to register with but it is worth it. ",(0,o.kt)("strong",{parentName:"p"},"I don't force you to use my referral link, it's totally upto\nyou.")," ",(0,o.kt)("a",{parentName:"p",href:"https://hetzner.cloud/?ref=66oUbG2e4jXS"},"Hetzner Referral Link")),(0,o.kt)("p",null,"Consider using the referral link as support towards this project."),(0,o.kt)("h2",{id:"license"},"License"),(0,o.kt)("p",null,'The BSD 3-Clause "New" or "Revised" License.'),(0,o.kt)("p",null,"Copyright (C) 2022-present, D. Antony J.R."))}h.isMDXComponent=!0}}]);