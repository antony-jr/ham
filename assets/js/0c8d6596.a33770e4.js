"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[97],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1},o="Syntax and Specification",l={unversionedId:"ham-recipe/spec",id:"ham-recipe/spec",title:"Syntax and Specification",description:'This document specifies the specification of the "Ham Recipe". The following is the directory structure to be',source:"@site/docs/ham-recipe/spec.md",sourceDirName:"ham-recipe",slug:"/ham-recipe/spec",permalink:"/ham/docs/ham-recipe/spec",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ham-recipe/spec.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Ham Recipe",permalink:"/ham/docs/category/ham-recipe"},next:{title:"Community Recipes",permalink:"/ham/docs/ham-recipe/recipes"}},s={},p=[{value:"Build Environment",id:"build-environment",level:2},{value:"Syntax",id:"syntax",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>version</code>",id:"version",level:3},{value:"<code>args</code>",id:"args",level:3},{value:"<code>build</code>",id:"build",level:3},{value:"<code>build.name</code>",id:"buildname",level:4},{value:"<code>build.run</code>",id:"buildrun",level:4},{value:"<code>post_build</code>",id:"post_build",level:3},{value:"Examples",id:"examples",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"syntax-and-specification"},"Syntax and Specification"),(0,i.kt)("p",null,'This document specifies the specification of the "Ham Recipe". The following is the directory structure to be\nfollowed when creating a "Ham Recipe". Since the software is in ',(0,i.kt)("strong",{parentName:"p"},"alpha")," stage, the syntax and spec may change\nwithout any notice but we will try to keep backward compatibility as much as possible."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"-- <Ham Recipe Name>\n |\n |-- .git (OPTIONAL VERSION CONTROL)\n |-- (ANY DIREcTORIES OR FILES YOU WANT)\n |\n |-- ham.yml # (REQUIRED)\n -\n")),(0,i.kt)("p",null,'The "Ham Recipe Name" can be any valid directory name, but it is recommended\nto use some meaningful name. We recommend using ',(0,i.kt)("strong",{parentName:"p"},"(LineageOS Device Codename)-(Short Form of OS)-(OS Version)"),"."),(0,i.kt)("p",null,"Example, LineageOS 19.1 build for OnePlus 6 device can have the Ham Recipe name as ",(0,i.kt)("inlineCode",{parentName:"p"},"enchilada-los19.1"),"."),(0,i.kt)("h2",{id:"build-environment"},"Build Environment"),(0,i.kt)("p",null,"During the build, your recipe will run on a ",(0,i.kt)("strong",{parentName:"p"},"Ubuntu 20.04 LTS")," Virtual Machine at Hetzner. By default the recipe\nwill not be run in a docker container but will run directly on the VPS provided by Hetzner. We really don't need\ndocker since the VM itself sort of acts like a container. ",(0,i.kt)("strong",{parentName:"p"},"But you may install docker with apt install -y -qq, and\nuse docker image of your choice"),", this decision is totally upto you."),(0,i.kt)("p",null,"By default we ",(0,i.kt)("strong",{parentName:"p"},"install all the dependencies required to build LineageOS or AOSP"),", we also install android platform\ntools by default, ",(0,i.kt)("strong",{parentName:"p"},"you don't have to install these, in your recipe.")," "),(0,i.kt)("p",null,"We also setup ",(0,i.kt)("strong",{parentName:"p"},"ccahe")," with ",(0,i.kt)("strong",{parentName:"p"},"50G"),", which is suitable for a single build. We also install the ",(0,i.kt)("strong",{parentName:"p"},"repo")," command to the\nsystem itself so no need to install that by yourself. We also install some useful tools and system libs."),(0,i.kt)("p",null,"Each build will have the following directory created on the build environment for you to use,"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"/ham-recipe")," - This is the copy of your ham recipe directory with all it's contents, whatever files you have in your\nrecipe directory will be available here. So you can use absolute paths to access those files from the recipe.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"/ham-build")," - This is the working directory for you, and will be cd-ed into when executing your build."))),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"By default we don't set the default python version for use, you need to set this manually in your\nham recipe, this is to support older AOSP builds. Set your default python version with ",(0,i.kt)("inlineCode",{parentName:"p"},"apt install -y -qq python-is-python3"),", without this your recipe might fail since repo commands needs a default python version.")),(0,i.kt)("p",null,"Additional Environmental Variable will be set if the ham recipe contains arguments from the user."),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Now we will specify the syntax for ",(0,i.kt)("inlineCode",{parentName:"p"},"ham.yml")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ham.yaml")," YAML file."),(0,i.kt)("h3",{id:"title"},(0,i.kt)("inlineCode",{parentName:"h3"},"title")),(0,i.kt)("p",null,"The title of your recipe. HAM displays this on the user's terminal when executed. Have a meaningful title for the\nuser to understand and confirm what the recipe do."),(0,i.kt)("p",null,"Example, ",(0,i.kt)("em",{parentName:"p"},'"Lineage OS 19.1 (Enchilada) (Signed) without GAPPS"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'title: "Lineage OS 19.1 (Enchilada) (Signed)"\n')),(0,i.kt)("h3",{id:"version"},(0,i.kt)("inlineCode",{parentName:"h3"},"version")),(0,i.kt)("p",null,"A string which defines a version, change this to trigger a change. Builds on Hetzner is tracked by the SHA256 hash\nof the ",(0,i.kt)("inlineCode",{parentName:"p"},"ham.yml")," file, so to trigger a change, change the version string to something. We recommend using\nsemver."),(0,i.kt)("p",null,"Example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "0.1.0"\n')),(0,i.kt)("h3",{id:"args"},(0,i.kt)("inlineCode",{parentName:"h3"},"args")),(0,i.kt)("p",null,"This is optional, this holds the array of variables required for the build, these variables will be asked from the\nuser when they invoke ",(0,i.kt)("inlineCode",{parentName:"p"},"ham get"),". You may use this to get a secret value such as API Key or string to customize\nthe build. You may also ask for a file to upload to the build server for to use in build, like Android Certificates\nor GPG Keys."),(0,i.kt)("p",null,"Each ",(0,i.kt)("strong",{parentName:"p"},"argument needs a ",(0,i.kt)("inlineCode",{parentName:"strong"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"prompt"),", and ",(0,i.kt)("inlineCode",{parentName:"strong"},"type"),".")," Optionally a ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"required"))," bool which can\nfail the ",(0,i.kt)("inlineCode",{parentName:"p"},"ham get")," when the user does not provide the value. This is by default ",(0,i.kt)("strong",{parentName:"p"},"false.")),(0,i.kt)("p",null,"Example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'args:\n  - id: android_certs\n    prompt: "Path to Android Certs .zip file Un-Encrypted"\n    required: true\n    type: file\n\n  - id: github_token\n    prompt: "Github Repo Token"\n    type: secret\n\n  - id: github_user\n    prompt: "Github Username"\n    type: value\n')),(0,i.kt)("p",null,"These variables ",(0,i.kt)("strong",{parentName:"p"},"will be available on the build server, so your recipe can use these.")," These variables will be\navailable as a ",(0,i.kt)("strong",{parentName:"p"},"environment variable"),". The ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"id")," of the variable")," will be used as the ",(0,i.kt)("strong",{parentName:"p"},"name of the\nenvironmental variable"),", the value of the ",(0,i.kt)("strong",{parentName:"p"},"environemtal variable")," will be the one given by the user during\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"ham get")," invocation when the build was initially started."),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"id"))," will be ",(0,i.kt)("strong",{parentName:"p"},"converted to uppercase")," and will be set as a ",(0,i.kt)("strong",{parentName:"p"},"environmental variable"),"."),(0,i.kt)("p",null,"Example,\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"id: android_certs"))," will be available as ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"ANDROID_CERTS"))," environmental variable, ",(0,i.kt)("strong",{parentName:"p"},"in case if it's a\nfile, then the environmental variable will have the path to the uploaded file, which you can move to your working\ndirectory to use it.")),(0,i.kt)("p",null,"For example, you may use the variables like this,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"build:\n  - name: Copy Android Certificates\n    run: |\n      cd /root/\n      cp $ANDROID_CERTS certs.zip\n      rm -rf .android-certs\n      mkdir -p .android-certs\n      mv certs.zip .android-certs/certs.zip\n      cd .android-certs\n      unzip certs.zip\n\n  - name: Using Secrets\n    run: echo $GITHUB_TOKEN > ~/gh_token.txt \n")),(0,i.kt)("h3",{id:"build"},(0,i.kt)("inlineCode",{parentName:"h3"},"build")),(0,i.kt)("p",null,"This is the main list of commands for your build. This will be run after installing deps and setting up the environemnt\nfor you. Like copying files to the server and setting up the required environmental variables."),(0,i.kt)("p",null,"Each entry in build ",(0,i.kt)("strong",{parentName:"p"},"must contain a ",(0,i.kt)("inlineCode",{parentName:"strong"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"run")),". ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"run"))," can be a multiline string which can\nbe a list of linux commands executed line by line."),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"By default we don't set the default python version for use, you need to set this manually in your\nham recipe, this is to support older AOSP builds. Set your default python version with ",(0,i.kt)("inlineCode",{parentName:"p"},"apt install -y -qq python-is-python3"),", without this your recipe might fail since repo commands needs a default python version.")),(0,i.kt)("p",null,"For Python3, your recipe should start like this,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"build:\n  - name: Set Python3 as Default\n    run: apt install -y -qq python-is-python3\n")),(0,i.kt)("h4",{id:"buildname"},(0,i.kt)("inlineCode",{parentName:"h4"},"build.name")),(0,i.kt)("p",null,"This will be displayed on the user's terminal during the progress tracking, so give a meaningful name."),(0,i.kt)("h4",{id:"buildrun"},(0,i.kt)("inlineCode",{parentName:"h4"},"build.run")),(0,i.kt)("p",null,"Can be a string or a multiline string which executes a linux command."),(0,i.kt)("p",null,"Example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'build:\n  - name: Making Directory\n    run: mkdir lineage || true\n\n  - name: Change Directory\n    run: cd lineage\n\n  - name: Echoing File\n    run: echo \'Hello World\' > test.txt\n\n  - name: Test\n    run: echo "$PATH" > env.txt\n\n  - name: Use Args\n    run: |\n      echo "$TELEGRAM_KEY" > key.txt\n      sleep 20\n      echo "Something"\n      \n  - name: Running Lineage OS build\n    run: sleep 30\n\n  - name: Signing APKs and Build\n    run: sleep 20\n')),(0,i.kt)("h3",{id:"post_build"},(0,i.kt)("inlineCode",{parentName:"h3"},"post_build")),(0,i.kt)("p",null,"This is a list of linux commands which will be executed after the build is succesfully finished, any error in any\ncommand in the build will not run these set of commands. ",(0,i.kt)("strong",{parentName:"p"},"This is only run after the build is finished without\nany error.")," You will be cd-ed into ",(0,i.kt)("inlineCode",{parentName:"p"},"/ham-build")," when post build is run."),(0,i.kt)("p",null,"Example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'post_build:\n  - /ham-recipe/scripts/upload.sh\n  - echo "Finished"\n')),(0,i.kt)("p",null,"Note here that we use ",(0,i.kt)("strong",{parentName:"p"},"/ham-recipe")," which is our copy of the ham recipe we are currently building, the ham recipe\ncan have any files like bash scripts to use during the build."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"You can look at the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ham-community"},"community recipes")," on how it is done."))}d.isMDXComponent=!0}}]);